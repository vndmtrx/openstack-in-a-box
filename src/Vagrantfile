# -*- mode: ruby -*-
# vi: set ft=ruby :

# Para executar no LibVirt sem precisar de senha de root:
# - sudo usermod -a -G libvirt $(whoami)
# - sudo usermod -a -G kvm $(whoami)
# - sudo usermod -a -G libvirt-qemu $(whoami)

ENV["VAGRANT_DEFAULT_PROVIDER"] = "libvirt"
PROJETO = "osbox"

# Definição dos nodes com seus IPs e recursos
nodes = {
  "controller01" => { "mgmt_ip" => "172.25.0.11", 
                      "prov_ip" => "172.27.0.11", 
                      "memory" => 4096, "cpus" => 2,
                      "disk_size" => "50G" },
  "compute01"    => { "mgmt_ip" => "172.25.0.21", 
                      "prov_ip" => "172.27.0.21", 
                      "memory" => 4096, "cpus" => 2 },
  "compute02"    => { "mgmt_ip" => "172.25.0.22", 
                      "prov_ip" => "172.27.0.21", 
                      "memory" => 2048, "cpus" => 1 },
  "blkstorage01" => { "mgmt_ip" => "172.25.0.31", 
                      "prov_ip" => "172.27.0.31", 
                      "memory" => 2048, "cpus" => 1 },
  "objstorage01" => { "mgmt_ip" => "172.25.0.32", 
                      "prov_ip" => "172.27.0.12", 
                      "memory" => 2048, "cpus" => 1 }
}

Vagrant.configure("2") do |config|
  # Gera a chave SSH se não existir
  unless File.exist?('id_ed25519') && File.exist?('id_ed25519.pub')
    system('ssh-keygen -t ed25519 -f id_ed25519 -N "" >/dev/null 2>&1')
    puts "Nova chave SSH gerada."
  end
  
  # Remove as chaves após destruir todas as VMs
  config.trigger.after :destroy do |trigger|
    trigger.ruby do |env, machine|
      if File.exist?('id_ed25519')
        File.delete('id_ed25519')
        File.delete('id_ed25519.pub')
        puts "Chave SSH removida."
      end
    end
  end

  # Imagem a ser utilizada
  config.vm.box = "almalinux/9"
  config.vm.post_up_message = ""
  config.ssh.insert_key = false
  config.vm.synced_folder "./", "/vagrant", type: "virtiofs"

  # Configuração comum para todas as VMs (LibVirt)
  config.vm.provider :libvirt do |libvirt|
    libvirt.driver = "kvm"
    libvirt.memorybacking :source, :type => "memfd"
    libvirt.memorybacking :access, :mode => "shared"

    libvirt.cpu_mode = "host-model"
    libvirt.nested = true

    libvirt.nic_model_type = "virtio"
    libvirt.management_network_name = "vagrant"
    libvirt.management_network_address = "192.168.250.0/24"
    libvirt.management_network_mode = "none"
    libvirt.management_network_autostart = true
  end

  nodes.each do |node_name, specs|
    config.vm.define node_name do |node|
      node.vm.hostname = node_name

      # Configurações de rede para o projeto
      node.vm.network "private_network", ip: specs["mgmt_ip"],
          libvirt__network_name: "#{PROJETO}_mgmt",
          libvirt__forward_mode: "nat",
          libvirt__dhcp_enabled: false

      node.vm.network "private_network", ip: specs["prov_ip"],
          libvirt__network_name: "#{PROJETO}_prov",
          libvirt__forward_mode: "none",
          libvirt__dhcp_enabled: false

      # Sobrescreve as configurações de memória e CPU para cada VM
      node.vm.provider :libvirt do |libvirt_host|
        libvirt_host.default_prefix = "#{PROJETO}_"
        libvirt_host.memory = specs["memory"]
        libvirt_host.cpus = specs["cpus"]

        # Se existir o campo disk_size, cria o disco extra
        if specs.key?("disk_size")
          libvirt_host.storage :file, :size => specs["disk_size"], :bus => 'virtio'
        end
      end

      # Adiciona a chave pública se ela não existir
      node.vm.provision "shell" do |s|
        s.inline = <<-SHELL
          PUBKEY=$(cat /vagrant/id_ed25519.pub)
          if ! grep -q "$PUBKEY" /home/vagrant/.ssh/authorized_keys; then
            echo "$PUBKEY" >> /home/vagrant/.ssh/authorized_keys
            echo "Chave SSH adicionada."
          else
            echo "A chave SSH já existe no arquivo authorized_keys."
          fi
        SHELL
      end

      # Ajuste da rota padrão das máquinas usando os IPs do VagrantFile
      node.vm.provision "shell" do |net|
        net.inline = <<-SHELL
        (
          # --- Ajustes padrões da conexão do Vagrant ---
          nmcli con mod eth0 connection.autoconnect yes
          nmcli con mod eth0 connection.autoconnect-priority -999
          nmcli con mod eth0 ipv4.route-metric 500
          nmcli con mod eth0 ipv4.ignore-auto-dns yes
          nmcli con mod eth0 ipv4.never-default yes
          nmcli con mod eth0 ipv6.method ignore
          nmcli con down eth0 && nmcli con up eth0

          # --- Remove conexões automáticas, se existirem ---
          nmcli -t -f NAME con show | grep '^System eth1$' && nmcli con delete "System eth1" || true
          nmcli -t -f NAME con show | grep '^System eth2$' && nmcli con delete "System eth2" || true

          # --- Remove conexões criadas anteriormente, para idempotência ---
          nmcli -t -f NAME con show | grep '^net_mgmt$' && nmcli con delete net_mgmt || true
          nmcli -t -f NAME con show | grep '^net_prov$' && nmcli con delete net_prov || true

          # --- Cria conexão persistente net_mgmt ---
          nmcli con add type ethernet con-name net_mgmt ifname eth1 \
              ipv4.method manual \
              ipv4.addresses #{specs["mgmt_ip"]}/24 \
              ipv4.gateway 172.25.0.1 \
              ipv4.route-metric 50 \
              ipv4.dns "1.1.1.1,8.8.8.8"

          # --- Cria conexão persistente net_prov ---
          nmcli con add type ethernet con-name net_prov ifname eth2 \
              ipv4.method manual \
              ipv4.addresses #{specs["prov_ip"]}/24

          # --- Ativa as conexões ---
          nmcli con up net_mgmt
          nmcli con up net_prov
        ) > /dev/null
        echo "Provisionamento de rede concluído."
        SHELL
      end
    end
  end
end
